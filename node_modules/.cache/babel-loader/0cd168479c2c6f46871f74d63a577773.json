{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajay Kaushal\\\\realtime-editor\\\\src\\\\pages\\\\EditorPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react'; // import toast from 'react-hot-toast';\n// import ACTIONS from '../Actions';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// import { initSocket } from '../socket';\n// import {\n//     useLocation,\n//     useNavigate,\n//     Navigate,\n//     useParams,\n// } from 'react-router-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorPage = () => {\n  _s();\n\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log('socket error', e);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      }); // Listening for joined event\n\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      }); // Listening for disconnected\n\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator('/');\n  }\n\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/logo.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId,\n        onCodeChange: code => {\n          codeRef.current = code;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorPage, \"O5aMOdwt2wCnuqVQk7SgEgKtMHE=\", true);\n\n_c = EditorPage;\nexport default EditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"sources":["C:/Users/Ajay Kaushal/realtime-editor/src/pages/EditorPage.js"],"names":["React","useState","useRef","useEffect","EditorPage","socketRef","codeRef","location","useLocation","roomId","useParams","reactNavigator","useNavigate","clients","setClients","init","current","initSocket","on","err","handleErrors","e","console","log","toast","error","emit","ACTIONS","JOIN","username","state","JOINED","socketId","success","SYNC_CODE","code","DISCONNECTED","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n// import toast from 'react-hot-toast';\r\n// import ACTIONS from '../Actions';\r\n// import Client from '../components/Client';\r\n// import Editor from '../components/Editor';\r\n// import { initSocket } from '../socket';\r\n// import {\r\n//     useLocation,\r\n//     useNavigate,\r\n//     Navigate,\r\n//     useParams,\r\n// } from 'react-router-dom';\r\n\r\nconst EditorPage = () => {\r\n    const socketRef = useRef(null);\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const { roomId } = useParams();\r\n    const reactNavigator = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            socketRef.current = await initSocket();\r\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n            function handleErrors(e) {\r\n                console.log('socket error', e);\r\n                toast.error('Socket connection failed, try again later.');\r\n                reactNavigator('/');\r\n            }\r\n\r\n            socketRef.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                username: location.state?.username,\r\n            });\r\n\r\n            // Listening for joined event\r\n            socketRef.current.on(\r\n                ACTIONS.JOINED,\r\n                ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room.`);\r\n                        console.log(`${username} joined`);\r\n                    }\r\n                    setClients(clients);\r\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                        code: codeRef.current,\r\n                        socketId,\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Listening for disconnected\r\n            socketRef.current.on(\r\n                ACTIONS.DISCONNECTED,\r\n                ({ socketId, username }) => {\r\n                    toast.success(`${username} left the room.`);\r\n                    setClients((prev) => {\r\n                        return prev.filter(\r\n                            (client) => client.socketId !== socketId\r\n                        );\r\n                    });\r\n                }\r\n            );\r\n        };\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(ACTIONS.JOINED);\r\n            socketRef.current.off(ACTIONS.DISCONNECTED);\r\n        };\r\n    }, []);\r\n\r\n    async function copyRoomId() {\r\n        try {\r\n            await navigator.clipboard.writeText(roomId);\r\n            toast.success('Room ID has been copied to your clipboard');\r\n        } catch (err) {\r\n            toast.error('Could not copy the Room ID');\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    function leaveRoom() {\r\n        reactNavigator('/');\r\n    }\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <div className=\"aside\">\r\n                <div className=\"asideInner\">\r\n                    <div className=\"logo\">\r\n                        <img\r\n                            className=\"logoImage\"\r\n                            src=\"/logo.png\"\r\n                            alt=\"logo\"\r\n                        />\r\n                    </div>\r\n                    <h3>Connected</h3>\r\n                    <div className=\"clientsList\">\r\n                        {clients.map((client) => (\r\n                            <Client\r\n                                key={client.socketId}\r\n                                username={client.username}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\r\n                    Copy ROOM ID\r\n                </button>\r\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\r\n                    Leave\r\n                </button>\r\n            </div>\r\n            <div className=\"editorWrap\">\r\n                <Editor\r\n                    socketRef={socketRef}\r\n                    roomId={roomId}\r\n                    onCodeChange={(code) => {\r\n                        codeRef.current = code;\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;"]},"metadata":{},"sourceType":"module"}